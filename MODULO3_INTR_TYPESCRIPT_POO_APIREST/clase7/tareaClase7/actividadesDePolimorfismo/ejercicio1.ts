/*
Este ejercicio trata sobre polimorfismo por sobrecarga, tambi√©n conocido como polimorfismo en tiempo de compilaci√≥n.

Ejercicio 1: Polimorfismo con Sobrecarga de Funciones (Tiempo de Compilaci√≥n)
Implementa una clase Calculadora que tenga un m√©todo sumar. El m√©todo debe
estar sobrecargado para permitir la suma de:
‚Ä¢ Dos n√∫meros enteros.
‚Ä¢ Tres n√∫meros enteros.
‚Ä¢ Dos cadenas, concatenando las dos cadenas.
*/

class Calculadora {
    // üëâ Estas son las "firmas" del m√©todo sumar (las formas en que puede llamarse)
    sumar(a: number, b: number): number;
    sumar(a: number, b: number, c: number): number;
    sumar(a: string, b: string): string;
  
    // üëâ Esta es la implementaci√≥n real del m√©todo
    sumar(a: any, b: any, c?: any): any {
      if (typeof a === "number" && typeof b === "number" && typeof c === "number") {
        // caso: tres n√∫meros
        return a + b + c;
      } else if (typeof a === "number" && typeof b === "number") {
        // caso: dos n√∫meros
        return a + b;
      } else if (typeof a === "string" && typeof b === "string") {
        // caso: dos strings
        return a + b;
      } else {
        throw new Error("Argumentos no v√°lidos");
      }
    }
  }

  const calc = new Calculadora();

console.log(calc.sumar(2, 3));          // ‚û°Ô∏è 5
console.log(calc.sumar(1, 2, 3));       // ‚û°Ô∏è 6
console.log(calc.sumar("Hola, ", "Neo")); // ‚û°Ô∏è "Hola, Neo"
